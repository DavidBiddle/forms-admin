require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/groups", type: :request do
  let(:other_org) do
    create :organisation, id: 2, slug: "other-org"
  end

  # This should return the minimal set of attributes required to create a valid
  # Group. As you add validations to Group, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { name: "group_name" }
  end

  let(:invalid_attributes) do
    { name: "" }
  end

  before do
    login_as_editor_user
  end

  describe "GET /index" do
    it "renders a successful response" do
      create :group
      get groups_url
      expect(response).to be_successful
    end

    it "shows all groups the user is a member of" do
      groups = create_list :group, 3, organisation: editor_user.organisation
      groups.each do |group|
        create :membership, user: editor_user, group:
      end

      # groups outside of organisation or not a member of
      # should not be shown
      create :group, organisation: editor_user.organisation
      create_list :group, 3, organisation: other_org

      get groups_url
      expect(assigns(:groups)).to eq groups
    end

    context "when the user is a super-admin" do
      before do
        login_as_super_admin_user
      end

      it "shows all the groups" do
        create_list :group, 3, organisation_id: 1

        create :organisation, id: 2, slug: "other-org"
        create_list :group, 3, organisation_id: 2

        get groups_url
        expect(assigns(:groups)).to eq Group.all
      end
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      group = create :group
      get group_url(group)
      expect(response).to be_successful
    end

    it "shows the forms in the group" do
      group = create :group
      forms = build_list(:form, 3) { |form, i| form.id = i }

      ActiveResource::HttpMock.respond_to do |mock|
        headers = { "X-API-Token" => Settings.forms_api.auth_key, "Accept" => "application/json" }
        forms.each do |form|
          mock.get "/api/v1/forms/#{form.id}", headers, form.to_json, 200
        end
      end

      group.group_forms << forms.map { |form| GroupForm.create! form_id: form.id, group_id: group.id }
      group.save!

      get group_url(group)
      expect(assigns[:forms]).to eq forms
    end

    context "with a group from another organisation" do
      it "is forbidden" do
        group = create :group, organisation: other_org
        get group_url(group)
        expect(response).to have_http_status(:forbidden)
      end

      context "when logged in as a super admin" do
        it "is allowed" do
          group = create :group, organisation: other_org
          login_as_super_admin_user
          get group_url(group)
          expect(response).to be_successful
        end
      end
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_group_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      group = create :group
      get edit_group_url(group)
      expect(response).to be_successful
    end

    context "with a group from another organisation" do
      it "is forbidden" do
        group = create :group, organisation: other_org
        get edit_group_url(group)
        expect(response).to have_http_status(:forbidden)
      end

      context "when logged in as a super admin" do
        it "is allowed" do
          group = create :group, organisation: other_org
          login_as_super_admin_user
          get edit_group_url(group)
          expect(response).to be_successful
        end
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Group" do
        expect {
          post groups_url, params: { group: valid_attributes }
        }.to change(Group, :count).by(1)
      end

      it "redirects to the created group" do
        post groups_url, params: { group: valid_attributes }
        expect(response).to redirect_to(group_url(Group.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Group" do
        expect {
          post groups_url, params: { group: invalid_attributes }
        }.to change(Group, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post groups_url, params: { group: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        { name: "new_group_name" }
      end

      it "updates the requested group" do
        group = create :group
        patch group_url(group), params: { group: new_attributes }
        group.reload
        expect(group.name).to eq("new_group_name")
      end

      it "redirects to the group" do
        group = create :group
        patch group_url(group), params: { group: new_attributes }
        group.reload
        expect(response).to redirect_to(group_url(group))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        group = create :group
        patch group_url(group), params: { group: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    context "with a group from another organisation" do
      it "is forbidden" do
        group = create :group, organisation: other_org
        patch group_url(group), params: { group: valid_attributes }
        expect(response).to have_http_status(:forbidden)
      end

      context "when logged in as a super admin" do
        it "is allowed" do
          group = create :group, organisation: other_org
          login_as_super_admin_user
          patch group_url(group), params: { group: valid_attributes }
          expect(response).to be_redirect
        end
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested group" do
      group = create :group
      expect {
        delete group_url(group)
      }.to change(Group, :count).by(-1)
    end

    it "redirects to the groups list" do
      group = create :group
      delete group_url(group)
      expect(response).to redirect_to(groups_url)
    end

    context "with a group from another organisation" do
      it "is forbidden" do
        group = create :group, organisation: other_org
        delete group_url(group)
        expect(response).to have_http_status(:forbidden)
      end

      context "when logged in as a super admin" do
        it "is allowed" do
          group = create :group, organisation: other_org
          login_as_super_admin_user
          delete group_url(group)
          expect(response).to be_redirect
        end
      end
    end
  end
end
